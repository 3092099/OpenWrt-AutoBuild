name: Build OpenWrt

on:
  workflow_dispatch:

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.set-matrix.outputs.release }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate build matrix
        id: set-matrix
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          release_date=$(date +"%Y.%m.%d-%H%M")
          configs=$(ls -mBQ *.config)
          echo "release=$release_date" >> $GITHUB_OUTPUT
          echo "matrix={\"config\": [$configs]}" >> $GITHUB_OUTPUT

  build:
    name: Build OpenWrt
    runs-on: ubuntu-latest
    needs: matrix
    env:
      release: ${{ needs.matrix.outputs.release }}
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup environment
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          sudo apt update && sudo apt full-upgrade -y
          sudo apt install -y \
            ack antlr3 asciidoc autoconf automake autopoint binutils \
            bison build-essential bzip2 ccache cmake cpio curl \
            device-tree-compiler fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gperf help2man intltool libc6-dev-i386 \
            libelf-dev libfuse-dev libglib2.0-dev libltdl-dev libmpc-dev \
            libmpfr-dev libncurses5-dev libpython3-dev libreadline-dev \
            libssl-dev libtool ninja-build p7zip-full python3 \
            python3-pyelftools python3-setuptools rsync scons squashfs-tools \
            subversion swig texinfo unzip vim wget xmlto xxd zlib1g-dev
          sudo apt autoremove --purge -y && sudo apt clean

          # Install po2lmo tool
          git clone --depth=1 https://github.com/openwrt-dev/po2lmo
          (cd po2lmo && sudo make && sudo make install)

      - name: Compile the firmware
        run: |
          WORK_DIR=/mnt/openwrt
          sudo mkdir -p $WORK_DIR
          cd $WORK_DIR
          sudo bash ${GITHUB_WORKSPACE}/build.sh "${GITHUB_WORKSPACE}/${{ matrix.config }}"

          # Verify firmware generation
          if [ -z "$(ls *.img.gz 2>/dev/null)" ]; then
            echo "No firmware found" && exit 1
          fi

          # Rename firmware files with release timestamp
          for img in *.img.gz; do
            output=$(basename "$img" .img.gz | awk -F';' '{printf $1"-"$3}')-${{ env.release }}
            mv "$img" "${output}.img.gz"
          done

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v2
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: OpenWrt-AutoBuild-${{ env.release }}
          files: /mnt/openwrt/*.img.gz

      - name: Telegram notification (optional)
        if: success() && env.TELEGRAM_TOKEN
        uses: appleboy/telegram-action@v0.4.0
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üì¶ Firmware Build Complete!
            üîß Project: OpenWrt-AutoBuild
            üïí Release: ${{ env.release }}
            üìç Download: https://github.com/${{ github.repository }}/releases/tag/OpenWrt-AutoBuild-${{ env.release }}

      - name: PushPlus notification (optional)
        if: success() && env.PUSH_PLUS_TOKEN
        uses: xhnmt/pushplus-action@main
        with:
          token: ${{ secrets.PUSH_PLUS_TOKEN }}
          title: "Firmware Build Complete"
          content: |
            Firmware Build Complete for OpenWrt-AutoBuild
            Release: ${{ env.release }}
            Download: https://github.com/${{ github.repository }}/releases/tag/OpenWrt-AutoBuild-${{ env.release }}
